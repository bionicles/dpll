// DPLL Algorithm in JavaScript.
// =====
//
// An implementation of the Davis-Putnam-Logemann-Loveland ([DPLL](http://en.wikipedia.org/wiki/DPLL_algorithm))
// algorithm
// for solving the [CNF-SAT](http://en.wikipedia.org/wiki/Boolean_satisfiability_problem) problem that runs on
// [Node.js](http://nodejs.org).
//
// This algorithm decides the satisfiability of propositional logic formulae in conjunctive normal form
// ([CNF](http://en.wikipedia.org/wiki/Conjunctive_normal_form)) - i.e. an *AND* of *OR*s.
//
// The [dpll source code](https://github.com/ofmooseandmen/DPLL.js) is available on GitHub, and is released under the MIT
// license.
//
// Most of this documentation actually comes from [wikipedia](http://en.wikipedia.org) and is generated by
// [docco](http://jashkenas.github.io/docco/).
//
// ## Disclaimer
// This implementation is most definitively not as efficient / complete / advanced / ... (fill in the blanks!) as those
// entering the [SAT competition](http://www.satcompetition.org/).
//
// ## Why JavaScript?
// > Any application that can be written in JavaScript, will eventually be written in JavaScript (Jeff Atwood).
//
// ## Tests
// This library comes with its unit tests written with [mocha](http://visionmedia.github.io/mocha). To run them, simply
// head to the *test* directory and execute _mocha *Test.js_.
//
// ## Quick Start
// Let's say we want to solve the following formula:
//
// *(a &or; b) &and; (&not;b &or; c &or; &not;d) &and; (d &or; &not;e)*
//
// In other words we want to know the values of *a*, *b*, *c*, *d* and *e* that make this formula **TRUE**.
//
// First we create the [CNF formula](./CnfFormula.html):  
//
//     var dpll = require('*PATH_TO_DPLL.js*/dpll');
//     
//     var formula = new dpll.CnfFormula();
//     var a = {};
//     var b = {};
//     var c = {};
//     var d = {};
//     var e = {};
//
//     formula.openClause(a).or(b).close()
//            .openClauseNot(b).or(c).orNot(d).close()
//            .openClause(d).orNot(e).close();
//
//
//
// Then we create a [solver](./Solver.html) for this formula:
//     
//     var solver = new dpll.Solver(formula);
//
//     var solution = solver.solve();
//     console.log(solution.get(a));
//
// If the formula has been solved the result will **NOT** contain the variables that have
// been optimized away. For instance if the formula contains the [clause](./Clause.html) *(x &or; &not;x &or; y)* 
// and *x* appears nowhere in any other clause of the formula, then *x* is optimized away and therefore its value is
// irrelevant - i.e. it could be **TRUE** or **FALSE**.
//
// ## More about...
//
// - the DPLL algorithm itself: [Solver.js](./Solver.html)
//
// - the CNF Formula: [CnfFormula.js](./CnfFormula.html)
//
// ## Public API
//
(function() {
    // make `CnfFormula` available
    exports.CnfFormula = require('./CnfFormula');

    // make `Solver` available
    exports.Solver = require('./Solver');
})();
